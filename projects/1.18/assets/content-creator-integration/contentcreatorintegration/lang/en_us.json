{
  "cci.config.general": "This mod is a product of way too many hours of development and testing and is provided free to bridge the gap between content creators and their supporters. Consider donating to the mod author via the CurseForge page!",
  "cci.config.socket": "Category for socket tokens. These tokens are more likely than not, sensitive information, so be careful who you show these to.\n\nREMEMBER to add quotes around your token.\n\nIf you change these tokens whilst the game is running, please use \"/cci\" to restart the sockets.",
  "cci.config.streamlabsTokens": "Socket Api Tokens for Streamlabs. One token per line. Most likely requires a Streamlabs widget to be open when running. I would recommend the event list widget. To find your socket API token: Go to Streamlabs -> Dashboard -> Settings (in left sidebar) -> API Settings -> API Tokens -> Your Socket API Token",
  "cci.config.streamElementsTokens": "JWT Tokens for StreamElements. One token per line. To find your JWT token: Go to StreamElements -> Dashboard -> Click on your profile name (top left) -> (In Channels tab) Show secrets",
  "cci.config.donationAlertsTokens": "Tokens for DonationAlerts. One token per line. Untested. Please let me know if it works!",
  "cci.config.twitchChats": "Twitch channels' chat to listen to. One channel per line.",
  "cci.config.streamerName": "Set this if your streamer name is different from your Minecraft name for the $streamer global variable.",
  "cci.config.maxAutomaticReconnects": "Maximum amount of automatic reconnects before trying giving up.",
  "cci.config.enableInformationToasts": "The sockets we use can be unreliable at times. Turn this on to get toasts about their status and other events.",
  "cci.config.onlineConfigs": "URLs to pull online configs from. These should link to a raw file of the configuration. These configs will override local configs.",
  "cci.config.stats": "Enable local statistics collection? This information is for your own personal reference. None of it is be sent externally.",
  "cci.config.allowOutcomesRequiringServerWait": "Allow outcomes that require a server to wait until the user connects to a server that allows them to send outcomes? Outcomes are normally discarded otherwise.",
  "cci.config.logTypes": "Types of log types to write to disk. Putting socket_event in is the only way to see the raw event information (from the log file) as it is not printed to console. Everything else will still be print to console.",
  "cci.config.editorGuiScale": "Adjust the scale of the Event Configuration editor. Setting it to 0 makes it follow Minecraft's GUI scale. Set to -1 to do nothing.",
  "cci.config.guiListExpand": "When you select a config in the editor it automatically expands all items with AT MOST this many items.",
  "cci.config.guiMinecraftStyle": "Renders Boxes & Stuff's GUIs in a Minecraft Style instead.",
  "cci.config.guiDockPadding": "How much padding to add to the docked windows.",
  "cci.config.guiDockBorder": "Number of pixels before Boxes & Stuff thinks you're trying to dock a window",
  "cci.config.guiDoubleClickSpeed": "Speed, in ticks, to register a double click",
  "cci.config.guiTooltipCooldown": "Number of ticks before showing a tooltip",
  "cci.config.defaultProfile": "Default profile name. If set to \"default\", loads from the main CCI directory. If set, will read from that folder within the main CCI directory instead. Change in-game with the editor.",
  "cci.config.whitelistedUsers": "Whitelisted Users. These users will be able to trigger serverside outcomes.",
  "cci.config.enableBlacklist": "Converts the list of whitelisted users to be the list of blacklisted users.",
  "cci.config.commandPermissionLevel": "Permission level required to use the CCI's server command (the /cci command)",
  "cci.config.disallowedCommands": "Disallowed Commands. These commands are prevented from being executed by CommandOutcome. EG: To disable \"/time set day\", add the \"time\" command to the list. Does not cover for aliases (EG: /tp and /teleport)",
  "cci.command.profile.profileChanged": "Profile changed!",
  "cci.command.profile.errorChangingProfile": "Error changing profile to %s",
  "cci.command.replay.noCache": "No cache for %s found.",
  "cci.command.replay.noEvents": "No events logged for %s.",
  "cci.command.replay.indexTooHigh": "Index too high!",
  "cci.command.reconnect.failed": "Failed to reconnect %s",
  "cci.command.disconnect.failed": "Failed to disconnect %s",
  "cci.command.nosockets": "No sockets.",
  "cci.command.whitelist.client": "You are trying to whitelist another user from a client! It has to be done on the server console!",
  "cci.command.userWhitelisted": "Whitelisted %s.",
  "cci.command.userAlreadyWhitelisted": "That user is already whitelisted.",
  "cci.command.userNotWhitelisted": "%s not whitelisted.",
  "cci.command.userDewhitelisted": "%s removed from whitelist.",
  "cci.command.toggleBlacklist": "Blacklist now set to %s",
  "cci.command.debug.on": "CCI Debug Mode turned on.",
  "cci.command.debug.info": "Debug Mode allows CCI to read past Streamlabs/StreamElements events in a \"test.log\" file.\nCopy out their event lines from the logs and put it in a \"test.log\" file in your profile folder (where all the json files are).\nHit Shift+Tab to cycle through the lines of test.log.\nYou should have your console open to see the outputs.",
  "cci.command.dump.success": "Successfully dumped cached events to dump.json.",
  "cci.command.dump.fail": "Failed to dump events to dump.json",
  "window.popup.title": "Alert!",
  "cci.gui.title.configEditor": "Event Configuration Editor",
  "cci.gui.title.popup": "CCI Popup",
  "cci.gui.title.configs": "Configs",
  "cci.gui.title.setConstantName": "Set Constant Name",
  "cci.gui.noTokens": "No socket tokens or chat channels found",
  "cci.gui.button.addNewComponent": "Add New Component",
  "cci.gui.button.removeCurrentComponent": "Remove Current Component",
  "cci.gui.button.moveComponentUp": "Move Component Up",
  "cci.gui.button.moveComponentDown": "Move Component Down",
  "cci.gui.button.editComponent": "Edit Component",
  "cci.gui.button.enterComponent": "Enter Component",
  "cci.gui.button.save": "Save and Apply",
  "cci.gui.button.reloadConfigurations": "Reload Configuration Files",
  "cci.gui.button.exitWithoutSaving": "Exit Without Saving",
  "cci.gui.button.saveAndExit": "Save and Exit",
  "cci.gui.button.stats": "Statistics",
  "cci.gui.button.statsReset": "Shift-click to reset statistics",
  "cci.gui.button.statsButton": "Statistics",
  "cci.gui.toolbar.cut": "Cut!",
  "cci.gui.toolbar.copy": "Copied!",
  "cci.gui.toolbar.newProfile": "New Profile \n\nHold SHIFT to open Profile Directory instead",
  "cci.gui.toolbar.events": "Events",
  "cci.gui.toolbar.eventViewer": "Event Viewer",
  "cci.gui.toolbar.connections": "Connections",
  "cci.gui.toolbar.exit": "Exit",
  "cci.gui.toolbar.saveError": "Error Saving! Check Console for more details.",
  "cci.gui.toolbar.shiftSave": "Hold SHIFT when clicking this button to Save whilst exiting.",
  "cci.gui.toolbar.saveApplied": "Saved and Applied!",
  "cci.gui.toolbar.save": "Save",
  "cci.gui.toolbar.reload": "Reload",
  "cci.gui.toolbar.reloaded": "Reloaded all local configuration files",
  "cci.gui.toolbar.help": "Help",
  "cci.gui.nav.collapseAll": "Collapse All",
  "cci.gui.nav.expandAll": "Expand all in current",
  "cci.gui.nav.viewLibrary": "View Specific Library",
  "cci.gui.lib.createNew": "Create New Library",
  "cci.gui.lib.name": "Library Name",
  "cci.gui.lib.title": "Library - %s",
  "cci.gui.text.editing.title": "Editing",
  "cci.gui.text.editing.invalid": "Invalid input",
  "cci.gui.text.confirmExit.title": "Confirm exit?",
  "cci.gui.text.confirmExit": "Detected changes. Are you sure you would like to exit?",
  "cci.gui.sidebar": "Sidebar",
  "cci.gui.stats.statsDisabled": "Statistics collection disabled!",
  "cci.gui.stats.header": "Content Creator Integration has taken effect on:",
  "cci.gui.stats.event": "%1$s %2$s %3$s events",
  "cci.gui.stats.eventAmount": "%1$s %2$s %3$s events totalling %4$s",
  "cci.gui.stats.eventNone": "No events...yet!",
  "cci.gui.stats.footer": "Consider donating via the CurseForge page!",
  "cci.gui.stats.tooltip": "\"Totalling X\" is just a total of bits/viewers/months/raiders, etc. Anything that was put in the amount variable.",
  "cci.gui.stats.reset": "Reset",
  "cci.gui.stats.resetFull": "Reset",
  "cci.gui.help.info": "Content Creator Integration - Editor GUI powered by Boxes & Stuff\n\nBest viewed in 1080p with a forced GUI scale of 2 (what is this, 2006?)\n\n\nThis Help window is for how to use this User Interface, and not how to use the mod (unfortunately)\n\nWindow on the left is purely for navigation.\nWindow on the right is purely for manipulation.\n\n\nManipulation (window on the RIGHT) Controls:-\n\nDouble Click: Add To/Edit (Hold SHIFT to edit, in Maps)\nRight Click: Remove/Delete\nClick & Drag (when in arrays) to reorder\nCtrl+X/C/V: Cut, Copy Paste\nWhen in Event Viewer: Ctrl+C/Ctrl+Shift+C copies the selected variable name/value\n\nManipulation Tip: You always have to go one level up to add to something. Double click on the \"conditions\" field to add a condition, double click on the configuration type in a Map to add a new Event, etc. If you are looking at the list of Events, you need to go one level up to add them.\n\nHolding SHIFT when exiting will save before exit.\n\n\n\n\"I hope this helpful help ui was helpful in helping you get some help.\" -AuscD",
  "cci.gui.help.stats": "Statistics",
  "cci.gui.help.debug": "Enable Debug",
  "cci.gui.edit.title": "Edit",
  "cci.gui.addCondition.title": "Add Condition",
  "cci.gui.addCondition.unconditional": "Unconditional",
  "cci.gui.addOutcome.title": "Add Outcome",
  "cci.gui.addOutcome.potentiallyClientside": "There's a potential for this Outcome to be client-side only.",
  "cci.gui.eventViewer.hideVar": "Hide variable values",
  "cci.gui.eventViewer.dump": "Dump Events",
  "cci.gui.eventViewer.dumpTip": "Dumps cache events to a dump.json file.",
  "cci.gui.eventViewer.replay": "Replay this event",
  "cci.gui.eventViewer.notAVar": "Not actually a variable",
  "cci.gui.eventViewer.clearQueues": "Clear Queues",
  "cci.gui.eventViewer.clearQueuesTip": "Clear all your queues. In the event you get botted or something and have a flood of events in your queues. This clears them all.",
  "cci.gui.eventViewer.queuesCleared": "Queues cleared. There were %s queued events",
  "cci.gui.connections.title": "Connection Status",
  "cci.gui.connections.reconnect": "Reconnect",
  "cci.gui.connections.reconnectAll": "Hold SHIFT to reconnect ALL",
  "cci.gui.connections.disconnect": "Disconnect",
  "cci.gui.connections.disconnectAll": "Hold SHIFT to disconnect ALL",
  "cci.events.last": "Variables of the last %s events:",
  "cci.events.tooltip": "Hold Shift and Ctrl to show the values of the variables (limited to 5 events). This list is scrollable with the scroll wheel.",
  "cci.events.for": "Events for: %s",
  "cci.events.constants": "These are constant definitions. They're special and don't get events.",
  "cci.selected": "This window shows information about the selected element. Manipulate them with the controls under each browser window.",
  "cci.docs": "Full documentation for this mod can be found at: https://content-creator-integration.readthedocs.io",
  "cci.docs.tooltip": "Shift + Click to open URL",
  "cci.toast.connecting": "Connecting",
  "cci.toast.connected": "Connected",
  "cci.toast.authenticated": "Authenticated",
  "cci.toast.failed": "Failed to connect",
  "cci.toast.reconnecting": "Reconnecting",
  "cci.toast.disconnected": "Disconnected",
  "cci.toast.disablingReconnects": "Disabling reconnects",
  "cci.toast.failedReconnect": "Failed to reconnect",
  "cci.toast.loadedOnline": "Loaded online configs",
  "cci.component.EventConfiguration.configs": "List of event types and configurations",
  "cci.component.EventConfiguration.init": "List of events to execute when this configuration file gets loaded (and when it is reloaded). Only global variables will be passed initially but you can add more variables in each event's conditions and outcomes. All events will be executed, the event's allowsOtherEventsToTrigger isn't used here.",
  "cci.component.EventConfiguration.from": "This is the online source for this EventConfiguration. Ignore this field. If the name in the UI does not have an asterisk (*), then this file was loaded locally.",
  "cci.component.EventConfiguration.type": "This is to define what type of EventConfiguration this is if pulled from an online source. Set this is you want to host this file online, eg: streamlabs/streamelements/chat/etc. Bear in mind that retrieving an online file will override local configs.",
  "cci.component.EventConfiguration.online": "This configuration file was from an online source.",
  "cci.component.Constants.info": "Additional info (for library purposes)",
  "cci.component.Constants.conditions": "List of condition constants",
  "cci.component.Constants.outcomes": "List of outcome constants",
  "cci.component.Constants.events": "List of event constants",
  "cci.component.Configuration._for": "Which account is this configuration for. If null, will be applied to all accounts.",
  "cci.component.Configuration.queue": "Which event types should be queued?",
  "cci.component.Configuration.types": "List of event types",
  "cci.component.Event.conditions": "List of conditions required to trigger the event.",
  "cci.component.Event.outcomes": "List of outcomes to trigger if the event meets the conditions.",
  "cci.component.Event.name": "Optional name for this event, for Editor readability.",
  "cci.component.Event.constantName": "The name of mapping to the Constant Event to reference. If this is set, we check against the Constant Event's conditions and trigger their outcomes.",
  "cci.component.Event.disabled": "Disable this event?",
  "cci.component.Event.triggersFromAnyConditionMet": "Does this event trigger from any condition that is met?",
  "cci.component.Event.allowsOtherEventsToTrigger": "Does triggering this event still allow other events to trigger?",
  "cci.component.Event.singleOutcomeOnly": "If there are multiple outcomes for the event, only the first outcome that succeeds?",
  "cci.component.Event.playTime": "How long to play the event, in ticks. Only if the event type has been registered a queue. Set to -1 to skip the queue.",
  "cci.component.Event.delay": "How long of a delay, in ticks, before playing the event. Supports variable insertion.",
  "cci.component.Event.cooldown": "How often this event can be triggered, in ticks. Remove to have no cooldown. Supports variable insertion.",
  "cci.component.Event.disableShortCircuitWhenOnCooldown": "Normally, if this event is on cooldown (and \"allowsOtherEventsToTrigger\" is disabled) and things meet the conditions, this event stops other events triggering. This disables that.",
  "cci.component.Condition.displayName": "Display name. What's this for?",
  "cci.component.Condition.inverseMatch": "If the condition isn't met, consider it met and vice versa.",
  "cci.component.SpecificUserCondition.description": "Use this to check for a specific username.",
  "cci.component.SpecificUserCondition.username": "Username to check for.",
  "cci.component.SpecificAmountCondition.description": "Use this to check for a specific value.",
  "cci.component.SpecificAmountCondition.optionalVariableName": "Do you want to search for a specific variable name? Remove to look for the default variable \"amount\".",
  "cci.component.SpecificAmountCondition.amount": "Amount to check for.",
  "cci.component.RangedAmountCondition.description": "Use this to check for a range of values.",
  "cci.component.RangedAmountCondition.optionalVariableName": "Do you want to search for a specific variable name? Remove to look for the default variable \"amount\".",
  "cci.component.RangedAmountCondition.min": "Minimum range (inclusive). Remove to have no minimum range.",
  "cci.component.RangedAmountCondition.max": "Maximum range (inclusive). Remove to have no maximum range.",
  "cci.component.RangedAmountCondition.minVar": "Minimum range (inclusive) from a range. Takes priority over the number value.",
  "cci.component.RangedAmountCondition.maxVar": "Maximum range (inclusive) from a range. Takes priority over the number value.",
  "cci.component.MessageCondition.description": "Use this to check for a content in the event's message.",
  "cci.component.MessageCondition.optionalVariableName": "Do you want to search for a specific variable name? Remove to look for the default variable \"message\".",
  "cci.component.MessageCondition.exactPhrase": "Does this require an exact phrase?",
  "cci.component.MessageCondition.caseSensitive": "Is this phrase case sensitive?",
  "cci.component.MessageCondition.phrase": "What is the phrase?",
  "cci.component.VariableCondition.description": "Use this to check for a specific variable.",
  "cci.component.VariableCondition.variableName": "The name of the variable you are targeting",
  "cci.component.VariableCondition.variableResult": "The result you are hoping to match with. If you are looking to see if this is contained in within the variable result, use MessageCondition instead with optionalVariableName set.",
  "cci.component.VariableCondition.caseSensitive": "Be case sensitive?",
  "cci.component.VariableCondition.isGlobal": "Check from global variables.",
  "cci.component.VariableExistsCondition.description": "Use this to check if a variable exists.",
  "cci.component.VariableExistsCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.VariableExistsCondition.isGlobal": "Check if it's specifically a global variable.",
  "cci.component.VariableIsNumberCondition.description": "Use this to check if a variable is a number.",
  "cci.component.VariableIsNumberCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.VariableRemoveCondition.description": "Removes a variable from the variables list",
  "cci.component.VariableRemoveCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.VariableRemoveCondition.isGlobal": "Removes this variable from the global variables as well.",
  "cci.component.RandomCondition.description": "Use this to for a random chance for this condition to be met.",
  "cci.component.RandomCondition.chance": "What is the chance for this condition to be met? 0.0 to 1.0.",
  "cci.component.TargetExistsCondition.description": "Use this to see if a certain target exists or not.",
  "cci.component.TargetExistsCondition.target": "Target selector string to target.",
  "cci.component.NoteCondition.description": "Use this condition to load a note/note array into a variable. It will fail if the note/note array doesn't exist. Put note conditions higher up so the later conditions and outcomes will be able to use what's in the variable.",
  "cci.component.NoteCondition.noteName": "Name of the note.",
  "cci.component.NoteCondition.variableName": "Name of the variable to insert the note/note array. Will override event variables if they already exist.",
  "cci.component.NoteCondition.loadNotesArray": "Load the notes array instead of the simple note?",
  "cci.component.NoteCondition.meetConditionIfNoteDoesNotExist": "Should this condition be met even if the note or note array doesn't exist?",
  "cci.component.NoteCondition.defaultVariableValue": "If the note does not exist, should there be a default variable value set? (Use commas with a space, for separate objects in arrays)",
  "cci.component.MultipleConditionCondition.description": "Use this condition for multiple conditions. Potentially used for a nested OR statement if \"any\" is turned on.",
  "cci.component.MultipleConditionCondition.conditions": "Array of conditions.",
  "cci.component.MultipleConditionCondition.any": "Will any of the conditions met trigger this condition? Basically an AND and OR switch.",
  "cci.component.ConstantCondition.description": "Use this condition to call a constant condition.",
  "cci.component.ConstantCondition.name": "Name of the constant condition.",
  "cci.component.ModExistsCondition.description": "Use this condition to check if a mod is loaded.",
  "cci.component.ModExistsCondition.modId": "ID of the mod.",
  "cci.component.ServerCondition.description": "Condition will be met if you can trigger server-side outcomes.",
  "cci.component.TargetCondition.description": "Insert a specific target's information into a variable. Always meets condition. Will insert a blank string if target or argument cannot be found.",
  "cci.component.TargetCondition.target": "Target selector string to target.",
  "cci.component.TargetCondition.argument": "Arguments: name, uiid, health, location[x/y/z], rotation[yaw/pitch], look[x/y/z][number], radius[x/y/z/h][number], biome, dim/dimension, dimType/dimensionType, light[block], diff/difficulty, time, day",
  "cci.component.TargetCondition.variableName": "Variable name to insert the result into.",
  "cci.component.ArithmeticCondition.description": "Do simple arithmetic calculations on variables. Inserts 0 if something failed. Will always return a double-type number. Use round/floor/ceil to convert value1 to a integer-type (whole number).",
  "cci.component.ArithmeticCondition.calc": "Function to use: +, -, x, /, pow, sqrt, mod, max, min, round, floor, ceil, log, signum, abs, sin, cos, tan, asin, acos, atan. Trigonometric functions uses degrees. Some operations only use the first variable.",
  "cci.component.ArithmeticCondition.value1": "First value, can be a variable name or number.",
  "cci.component.ArithmeticCondition.value2": "Second value, can be a variable name or number.",
  "cci.component.ArithmeticCondition.variableName": "Variable name to insert the result into.",
  "cci.component.RandomNumberCondition.description": "Gets a random number between two values.",
  "cci.component.RandomNumberCondition.value1": "First value, can be a variable name.",
  "cci.component.RandomNumberCondition.value2": "Second value, can be a variable name.",
  "cci.component.RandomNumberCondition.variableName": "Variable name to insert the result into.",
  "cci.component.RandomNumberCondition.roundNumber": "Round off the number to the nearest Integer?",
  "cci.component.StringConcatCondition.description": "Puts two objects together into a variable as a String.",
  "cci.component.StringConcatCondition.prefix": "First part. Supports variables.",
  "cci.component.StringConcatCondition.suffix": "Last part. Supports variables.",
  "cci.component.StringConcatCondition.variableName": "Name of the variable to insert into. Will override existing variables.",
  "cci.component.StringCompareToCondition.description": "Compares a String to another String (for ordering).",
  "cci.component.StringCompareToCondition.source": "Source String.",
  "cci.component.StringCompareToCondition.target": "String to compare with.",
  "cci.component.StringCompareToCondition.result": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringIndexOfCondition.description": "Checks a String for the index of the target String.",
  "cci.component.StringIndexOfCondition.source": "Source String.",
  "cci.component.StringIndexOfCondition.target": "Target String.",
  "cci.component.StringIndexOfCondition.last": "Check for last index instead of first index",
  "cci.component.StringIndexOfCondition.result": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringLowerCaseCondition.description": "Converts a String to lower case.",
  "cci.component.StringLowerCaseCondition.source": "Source String.",
  "cci.component.StringLowerCaseCondition.result": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringReplaceCondition.description": "Replaces a String within a String with another String. Supports regex.",
  "cci.component.StringReplaceCondition.source": "Source String.",
  "cci.component.StringReplaceCondition.target": "Target String.",
  "cci.component.StringReplaceCondition.replacement": "Replacement String.",
  "cci.component.StringReplaceCondition.result": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringReplaceCondition.literal": "Use this to use a literal string rather than a regex pattern matcher.",
  "cci.component.StringSplitCondition.description": "Splits a string with the listed pattern. Result is an array.",
  "cci.component.StringSplitCondition.source": "Source String.",
  "cci.component.StringSplitCondition.separator": "Pattern to split by",
  "cci.component.StringSplitCondition.result": "Name of the variable to insert the result into. Will override existing variables. Result is an array.",
  "cci.component.StringSplitCondition.omitEmptyStrings": "Do we omit empty strings?",
  "cci.component.StringSubStringCondition.description": "Takes a part of a String based on the given parameters. Returns false if the indices are incorrect.",
  "cci.component.StringSubStringCondition.source": "Source String.",
  "cci.component.StringSubStringCondition.beginIndex": "Start index for substring",
  "cci.component.StringSubStringCondition.endIndex": "End index for substring (optional)",
  "cci.component.StringSubStringCondition.result": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringTrimCondition.description": "Trims the whitespace around a String",
  "cci.component.StringTrimCondition.source": "Source String.",
  "cci.component.StringTrimCondition.result": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringUpperCaseCondition.description": "Converts a String to upper case.",
  "cci.component.StringUpperCaseCondition.source": "Source String.",
  "cci.component.StringUpperCaseCondition.result": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringLengthCondition.description": "Puts the length of a string into a variable.",
  "cci.component.StringLengthCondition.variableName": "Source String.",
  "cci.component.StringLengthCondition.variableResult": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.StringContainsCondition.description": "Checks if a string contains a target string",
  "cci.component.StringContainsCondition.source": "Source String.",
  "cci.component.StringContainsCondition.target": "Target String.",
  "cci.component.StringEndsWithCondition.description": "Checks if a string ends with a target string",
  "cci.component.StringEndsWithCondition.source": "Source String.",
  "cci.component.StringEndsWithCondition.target": "Target String.",
  "cci.component.StringEqualsCondition.description": "Checks if a string equals to the target string",
  "cci.component.StringEqualsCondition.source": "Source String.",
  "cci.component.StringEqualsCondition.target": "Target String.",
  "cci.component.StringStartsWithCondition.description": "Checks if a string starts with a target string",
  "cci.component.StringStartsWithCondition.source": "Source String.",
  "cci.component.StringStartsWithCondition.target": "Target String.",
  "cci.component.RequestStatisticsCondition.description": "If you want to check the player's statistics, you need to request this from the server first. Put this in an event and in that same event, set a reasonable delay, such as 20 ticks or so (varies depending on player ping). In one of the outcomes, use an EventOutcome that has a StatisticsCondition to actually check the stat and act upon it.",
  "cci.component.StatisticsCondition.description": "Checks for a player statistic. Please look at RequestStatisticsConditions first.",
  "cci.component.StatisticsCondition.variableName": "The variable to put the statistic number into. Will return false if the statistics lookup failed.",
  "cci.component.GlobalVariableCondition.description": "(DEPRECATED) Writes information into a global variable that will can be used elsewhere in other events. Local variables of the same name will still override these. If you want to check the content of a variable, use VariableCondition",
  "cci.component.GlobalVariableCondition.variableName": "Name of the global variable to insert into. Will override existing variables.",
  "cci.component.GlobalVariableCondition.variableInput": "Content of the variable you are inserting into.",
  "cci.component.VariableInsertCondition.description": "Writes information into a variable to be used by other conditions/outcomes. For example, using multiple ConditionalOutcomes to see if a certain sentence should insert \"month\" or \"months\".",
  "cci.component.VariableInsertCondition.variableName": "Name of the variable to insert into. Will override existing variables.",
  "cci.component.VariableInsertCondition.variableInput": "Content of the variable you are inserting into.",
  "cci.component.VariableInsertCondition.isGlobal": "Adds this variable to the global variables as well.",
  "cci.component.ReloadNotesCondition.description": "Are you editing the notes externally? This condition will reload your notes.",
  "cci.component.VariableIsArrayCondition.description": "Use this to check if a variable is an array.",
  "cci.component.VariableIsArrayCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.ArrayCondition.description": "Use this to check for a String in an array from a specific variable.",
  "cci.component.ArrayCondition.variableName": "The name of the variable you are targeting.",
  "cci.component.ArrayCondition.variableResult": "The result you are hoping to match with within the array.",
  "cci.component.ArrayCondition.caseSensitive": "Be case sensitive?",
  "cci.component.ArrayLengthCondition.description": "Gets the length of an array. Returns false if the variable isn't an array.",
  "cci.component.ArrayLengthCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayLengthCondition.variableOutputName": "The name of the variable to store the result.",
  "cci.component.ArrayCombineCondition.description": "Combines two arrays.",
  "cci.component.ArrayCombineCondition.variableName1": "The name of the variable with the first array.",
  "cci.component.ArrayCombineCondition.variableName2": "The name of the variable with the second array.",
  "cci.component.ArrayCombineCondition.variableOutputName": "The name of the variable to store the combined array.",
  "cci.component.ArrayDeleteCondition.description": "Deletes a string from the array. Returns false if the variable is not an array or the string is not found in the array.",
  "cci.component.ArrayDeleteCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayDeleteCondition.stringToRemove": "String to remove from the array.",
  "cci.component.ArrayAppendCondition.description": "Adds a string to the array. Returns false if the variable is not an array.",
  "cci.component.ArrayAppendCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayAppendCondition.stringToRemove": "String to add to the array.",
  "cci.component.ArrayAppendCondition.create": "Create the array if it doesn't exist?",
  "cci.component.ArrayAppendCondition.isGlobal": "Add to global variables?",
  "cci.component.ArrayExplodeCondition.description": "Explodes the array into a different variable per object. Returns false if the variable isn't an array.",
  "cci.component.ArrayExplodeCondition.variableName": "The name of the variable that stores the array.",
  "cci.component.ArrayExplodeCondition.variableOutputName": "The name of the variable to store the results. Size of array will be stored in variable <name>Length, and each individual object will be stored in variable <name>0-(length-1)",
  "cci.component.RandomStringCondition.description": "Gets a random string from a list of strings.",
  "cci.component.RandomStringCondition.values": "Array of strings to pick from.",
  "cci.component.RandomStringCondition.variableName": "Variable name to insert the result into.",
  "cci.component.NullCondition.description": "A condition that is just always met.",
  "cci.component.ReadFileCondition.description": "Gets the lines of a file. Each line will be in variable $<file_name>_<line>, eg \"$file_1\", \"$file_2\". Total lines will be in $<file_name>_count, eg \"$file_count\".",
  "cci.component.ReadFileCondition.fileName": "File Name.",
  "cci.component.ConditionalCondition.description": "A condition, that if passes or fails, triggers a specific condition. A pre-check if you want.",
  "cci.component.ConditionalCondition.condition": "The condition to check first.",
  "cci.component.ConditionalCondition.passCondition": "If the condition passes, return this condition's result.",
  "cci.component.ConditionalCondition.failCondition": "If the condition fails, return this condition's results. Optional. Will return false if the condition is not met and this is not set.",
  "cci.component.JsonSafeCondition.description": "Makes Strings safe to be inserted into JSON lines",
  "cci.component.JsonSafeCondition.variableName": "Source string.",
  "cci.component.JsonSafeCondition.variableResult": "Name of the variable to insert the result into. Will override existing variables.",
  "cci.component.RepeatCondition.description": "A condition that repeatedly calls a condition. This is for functional conditions.",
  "cci.component.RepeatCondition.times": "How many times to repeat the condition? The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatCondition.arrayVariable": "Variable to pull an array. If this is used, 'times' is ignored, and the array will be looped through instead. The array content being looped through will be put in the $arrayObject variable and removed once it is done. The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatCondition.condition": "The condition to repeat",
  "cci.component.RepeatCondition.breakCondition": "A condition, if met, breaks the loop cycle.",
  "cci.component.GameSettingsCondition.description": "Checks a Game Setting from the file.",
  "cci.component.GameSettingsCondition.key": "Key to check.",
  "cci.component.GameSettingsCondition.value": "Value to compare to value on file.",
  "cci.component.InventoryCondition.description": "Checks a for inventory slots and puts the first itemstack into a variable. Fails if we can't find a single inventory slot from all targets.",
  "cci.component.InventoryCondition.target": "Target selector string to target.",
  "cci.component.InventoryCondition.index": "Index in the inventory to look for.",
  "cci.component.InventoryCondition.variableName": "Variable name to put the result into",
  "cci.component.Outcome.displayName": "Display name. What's this for?",
  "cci.component.Outcome.weight": "The weight of this outcome, if there are multiple outcomes for this event.",
  "cci.component.Outcome.disabled": "Disable this outcome?",
  "cci.component.CommandOutcome.description": "Trigger a client-side or server-side command.",
  "cci.component.CommandOutcome.command": "String to be put into the command.",
  "cci.component.CommandOutcome.executeAsSelf": "Should the command be executed as the streamer or the server? (Only if the command is serverside)",
  "cci.component.CommandOutcome.isClientSideCommand": "Is the command a client side command?",
  "cci.component.CommandOutcome.handleFeedback": "How to handle the feedback of the command? Leave it as null to silence feedback (will not silence command errors). Leave it an empty string to allow the feedback. Put a name in to attempt to capture the feedback into a global variable of said name (only if the command is \"executeAsSelf\"). This listens for feedback from the server and will stop after a second. Bear in mind that CCI has to guess which chat message received is the feedback from the command, so do your testing! Allows variable insertion for the name. The feedback can not be used in the same event, as there will be a delay from sending the command to the server and to wait for the feedback. To use the feedback you will need to use a staggered event, or another event and a later time.",
  "cci.component.CommandOutcome.feedbackKeys": "To be used with \"handleFeedback\". If you know which feedback translation keys to listen for, put them in the array. If not, leave null, and CCI will capture the first available command feedback. To be used with commands that return several lines of feedback. Eg: Doing \"/time query daytime\" will return a localizable string with the key \"commands.time.query\". Add that if you want to capture just that one feedback line.",
  "cci.component.CommandOutcome.disableChatCommandFallback": "If you are connected to a server where you don't have CCI permissions/server doesn't have CCI installed, and \"executeAsSelf\" is enabled, CommandOutcome tries to send a chat message with the command instead. Turning this on disables that.",
  "cci.component.CommandOutcome.chat.fallbackWarning": "[CCI - WARNING] Using chat fallback for CommandOutcome with text longer than 256 characters. Expect errors!",
  "cci.component.SoundOutcome.description": "Play a sound either client-side or server-side.",
  "cci.component.SoundOutcome.clientSide": "Is the sound to be played on the client?",
  "cci.component.SoundOutcome.sound": "The sound name, in resource location format. EG minecraft:entity.pig.ambient",
  "cci.component.SoundOutcome.target": "The target selector for the sound. Only for non-client side sounds.",
  "cci.component.SoundOutcome.volume": "Volume of the sound",
  "cci.component.SoundOutcome.pitch": "Pitch of the sound",
  "cci.component.EventOutcome.description": "Attempt to trigger even more events. Use this to trigger delayed events, such as when Requesting Statistics or awaiting Command Feedback. Be mindful that the event's conditions are checked before triggering, so any functional conditions need to be done in a ConditionalOutcome instead, if the event has a delay.",
  "cci.component.EventOutcome.events": "List of events to attempt to trigger.",
  "cci.component.NoteOutcome.description": "Writes a note to file.",
  "cci.component.NoteOutcome.noteName": "Name of the note. If a note already exists by this name, it will be overwritten. You can use the note condition to see if the note exists first.",
  "cci.component.NoteOutcome.noteContent": "Content of note.",
  "cci.component.NoteOutcome.append": "Add the content to the end of the simple note, or add a new element into the notes array?",
  "cci.component.NoteOutcome.putInNotesArray": "Do we put the note content into the notes array?",
  "cci.component.MountOutcome.description": "Makes an entity mount another entity. Returns false if it failed.",
  "cci.component.MountOutcome.riderTarget": "Target selector for the rider.",
  "cci.component.MountOutcome.riddenTarget": "Target selector for the entity to be ridden.",
  "cci.component.MountOutcome.force": "Force the ride.",
  "cci.component.MountOutcome.forceToTop": "Force the rider to ride the topmost entity on the entity to ride.",
  "cci.component.MultipleOutcomeOutcome.description": "Use this outcome for multiple outcomes. For times you want only a single outcome to be triggered but at the same time, multiple.",
  "cci.component.MultipleOutcomeOutcome.outcomes": "List of outcomes",
  "cci.component.MultipleOutcomeOutcome.singleOutcomeOnly": "Stop on the first outcome that succeeds?",
  "cci.component.ConstantOutcome.description": "Use this outcome to call a constant outcome.",
  "cci.component.ConstantOutcome.name": "Name of the constant outcome.",
  "cci.component.ConditionalOutcome.description": "Use this outcome to check for a specific condition before triggering.",
  "cci.component.ConditionalOutcome.condition": "The condition to check.",
  "cci.component.ConditionalOutcome.outcome": "The outcome to trigger.",
  "cci.component.ConditionalOutcome.conditionNotMetOutcome": "An optional outcome to trigger if the condition isn't met.",
  "cci.component.ChatMessageOutcome.description": "Use this outcome to send put a message in chat if the player is in the world.",
  "cci.component.ChatMessageOutcome.message": "Message to send. Supports Minecraft's Text Formatting",
  "cci.component.ChatMessageOutcome.inActionBar": "Put the message in the player's Action Bar instead?",
  "cci.component.ToastOutcome.description": "Use this outcome to send put a message in chat if the player is in the world.",
  "cci.component.ToastOutcome.toastType": "Toast background type. 0 - 3. 0 = Advancement. 1 = Recipe. 2 = Narrator. 3 = System.",
  "cci.component.ToastOutcome.title": "Title for the toast.",
  "cci.component.ToastOutcome.subtitle": "Subtitle for the toast",
  "cci.component.ToastOutcome.titleColor": "Color for the title. Supports hex values.",
  "cci.component.ToastOutcome.subtitleColor": "Color for the subtitle. Supports hex values.",
  "cci.component.NullOutcome.description": "An outcome that does nothing.",
  "cci.component.NoteDeletionOutcome.description": "Deletes info of a note. If the note is empty then it will be removed anyway.",
  "cci.component.NoteDeletionOutcome.noteName": "Name of the note.",
  "cci.component.NoteDeletionOutcome.deletionType": "Deletion type for note. 0 = Entire note. 1 = Simple note. 2 = Notes array. 3 = Content within notes array.",
  "cci.component.NoteDeletionOutcome.noteContent": "Content to remove from array. Only used if deletionType is 3.",
  "cci.component.RepeatOutcome.description": "An outcome that repeatedly attempts an outcome.",
  "cci.component.RepeatOutcome.times": "How many times to repeat the outcome? The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatOutcome.arrayVariable": "Variable to pull an array. If this is used, 'times' is ignored, and the array will be looped through instead. The array content being looped through will be put in the $arrayObject variable and removed once it is done. The iteration count is stored in the $iteCount variable.",
  "cci.component.RepeatOutcome.outcome": "The outcome to repeat",
  "cci.component.RepeatOutcome.breakCondition": "A condition, if met, breaks the loop cycle.",
  "cci.component.HealthOutcome.description": "Heal or damage a list of targets.",
  "cci.component.HealthOutcome.target": "The target selector for the entities to affect.",
  "cci.component.HealthOutcome.amount": "Amount of health to change. Positive values heal, negative values hurt.",
  "cci.component.IMCOutcome.description": "Sends an InterModComms runtime message to another mod.",
  "cci.component.IMCOutcome.modId": "The modId of the mod to send this message to.",
  "cci.component.IMCOutcome.subject": "The key/subject of the IMC message.",
  "cci.component.IMCOutcome.message": "The value/message of the IMC message.",
  "cci.component.PopupOutcome.description": "Pop-up a window that requires the player to hit Done.",
  "cci.component.PopupOutcome.text": "The information text for the pop up.",
  "cci.component.PopupOutcome.postOkOutcome": "An optional outcome to trigger after the player hits Done.",
  "cci.component.PromptOutcome.description": "Pop-up a window that requires the player to hit Yes or No.",
  "cci.component.PromptOutcome.text": "The information text for the pop up.",
  "cci.component.PromptOutcome.yesOverride": "Override text for the Yes button?",
  "cci.component.PromptOutcome.noOverride": "Override text for the No button?",
  "cci.component.PromptOutcome.yesOutcome": "An optional outcome to trigger after the player hits Yes.",
  "cci.component.PromptOutcome.noOutcome": "An optional outcome to trigger after the player hits No.",
  "cci.component.InputOutcome.description": "Pop-up a window that requires the player to input some text.",
  "cci.component.InputOutcome.text": "The information text for the pop up.",
  "cci.component.InputOutcome.defaultInput": "Default text for the input box.",
  "cci.component.InputOutcome.variableInput": "The variable name to put the String from the input box once the player hits Done.",
  "cci.component.InputOutcome.postInputOutcome": "An outcome to trigger after the player hits Done. Bear in mind that the variable this InputOutcome inserts into is not a global variable and thus will be discarded if not stored in one.",
  "cci.component.NarratorOutcome.description": "Uses the built in Narrator support to speak audibly.",
  "cci.component.NarratorOutcome.message": "Message for narrator to say. Supports variable insertion",
  "cci.component.NarratorOutcome.interrupts": "Interrupts the currently speaking narrator line.",
  "cci.component.MotionOutcome.description": "Adjust the motion of a set of entities",
  "cci.component.MotionOutcome.target": "The target selector for the entities to affect.",
  "cci.component.MotionOutcome.amount": "The amount of motion to apply.",
  "cci.component.MotionOutcome.axis": "The axis to apply the motion to. Supports \"x\", \"y\", \"z\".",
  "cci.component.MotionOutcome.relative": "Should the motion applied be relative to the entity instead of absolute?",
  "cci.component.MotionOutcome.doOnPlayer": "Apply this to just the player? Due to how Minecraft works, the player on the client has it's own motion and cannot be modified by the server.",
  "cci.component.GameSettingsOutcome.description": "Sets a Game Setting to the file, and forces a Game Settings reload.",
  "cci.component.GameSettingsOutcome.key": "Key to set. The key can be found in options.txt, EG: mainHand:right, the key is \"mainHand\"",
  "cci.component.GameSettingsOutcome.value": "Value to set. Depends on the line in options.txt.",
  "cci.component.KeyPressOutcome.description": "Sets a keybind to the set pressed state. Eithere keyName, inputName, or rawInput needs to be set. CCI tries them in that order.",
  "cci.component.KeyPressOutcome.keyName": "Keybind to set. Key name can be found in options.txt. EG: key_key.forward:key.keyboard.w, the key is \"key.forward\". Omit the \"key_\" prefix.",
  "cci.component.KeyPressOutcome.inputName": "Directly presses a key. Input name can be found in options.txt. EG: key_key.forward:key.keyboard.w, the input name is \"key.keyboard.w\".",
  "cci.component.KeyPressOutcome.rawInput": "Direct raw input in numbers. Bit technical, but for when all else fails (or if you want to add modifiers). Split with commas. Order them by: keyCode/button,scanCode/isMouse(-1),action,modifiers. Bit technical but look up \"GLFW keyboard keycodes\" or \"GLFW key modifiers\" for some guidance.\n\nscanCode generally doesn't really matter if you're using key codes, and set it to -1 if you want to trigger a mouse input instead\n\nAction is 1 for pressed, 0 for unpress\n\nEG: 86,17,1,0 to press down the W key (on QWERTY keyboards) with no modifiers",
  "cci.component.KeyPressOutcome.pressed": "Pressed state to set. Keeping it as \"null\" unpresses the key. Ignored on rawInput.",
  "cci.component.FoodOutcome.description": "Adds a certain stat to players' food stats. Either level and saturation, or exhaustion.",
  "cci.component.FoodOutcome.target": "The target selector for the entities to affect.",
  "cci.component.FoodOutcome.level": "Level to add.",
  "cci.component.FoodOutcome.saturation": "Saturation to add.",
  "cci.component.FoodOutcome.exhaustion": "Exhaustion to add.",
  "cci.component.InventoryOutcome.description": "Manipulate the inventories of a set of entities matching the target selector.",
  "cci.component.InventoryOutcome.target": "The target selector for the entities to affect.",
  "cci.component.InventoryOutcome.funcType": "Available types: drop, swap, amount, delete, playerSwap",
  "cci.component.InventoryOutcome.index": "The index/slot number for the inventories. Used by all types except playerSwap. For reference, it should be: 0-35 for Main Inventory, 36-39 for Armor, 40 for Off hand, 41+ for modded inventories.",
  "cci.component.InventoryOutcome.additionalArgs": "Additional arguments. For Drop & Delete: The item stack count. For Swap: The index/slot to swap with. For Amount: The amount to increase/decrease the stack by. For Player Swap: The target selector for the other player."
}